//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/rchdeveloper/Documents/GitHub/api-query-language/raql-dotnet/RAQL.NET/Grammar/RAQL.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class RAQLParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, IN=7, BASE_OPERATOR=8, 
		STRING_OPERATOR=9, NUMBER_OPERATOR=10, CONJUNCTIONS=11, NUMBER=12, WORD=13, 
		STRING=14, BOOLEAN=15, NULL=16;
	public const int
		RULE_raql = 0, RULE_clause = 1, RULE_conjunction = 2, RULE_operation = 3, 
		RULE_string_array_operation = 4, RULE_number_array_operation = 5, RULE_bool_array_operation = 6, 
		RULE_array_operator = 7, RULE_string_operation = 8, RULE_string_operator = 9, 
		RULE_number_operation = 10, RULE_number_operator = 11, RULE_bool_operation = 12, 
		RULE_bool_operator = 13, RULE_field = 14, RULE_nullstring = 15, RULE_string = 16, 
		RULE_string_array = 17, RULE_number = 18, RULE_number_array = 19, RULE_bool = 20, 
		RULE_bool_array = 21;
	public static readonly string[] ruleNames = {
		"raql", "clause", "conjunction", "operation", "string_array_operation", 
		"number_array_operation", "bool_array_operation", "array_operator", "string_operation", 
		"string_operator", "number_operation", "number_operator", "bool_operation", 
		"bool_operator", "field", "nullstring", "string", "string_array", "number", 
		"number_array", "bool", "bool_array"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "' '", "')'", "'['", "','", "']'", null, null, null, null, 
		null, null, null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "IN", "BASE_OPERATOR", "STRING_OPERATOR", 
		"NUMBER_OPERATOR", "CONJUNCTIONS", "NUMBER", "WORD", "STRING", "BOOLEAN", 
		"NULL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RAQL.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RAQLParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RAQLParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RAQLParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RaqlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext clause() {
			return GetRuleContext<ClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RAQLParser.Eof, 0); }
		public RaqlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raql; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaql(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaqlContext raql() {
		RaqlContext _localctx = new RaqlContext(Context, State);
		EnterRule(_localctx, 0, RULE_raql);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			clause(0);
			State = 45;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext[] clause() {
			return GetRuleContexts<ClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClauseContext clause(int i) {
			return GetRuleContext<ClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConjunctionContext conjunction() {
			return GetRuleContext<ConjunctionContext>(0);
		}
		public ClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClauseContext clause() {
		return clause(0);
	}

	private ClauseContext clause(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ClauseContext _localctx = new ClauseContext(Context, _parentState);
		ClauseContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_clause, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
			case BASE_OPERATOR:
			case STRING_OPERATOR:
			case NUMBER_OPERATOR:
			case WORD:
				{
				State = 48;
				operation();
				}
				break;
			case T__0:
				{
				State = 49;
				Match(T__0);
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 50;
					Match(T__1);
					}
				}

				State = 53;
				clause(0);
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 54;
					Match(T__1);
					}
				}

				State = 57;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ClauseContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_clause);
					State = 61;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 62;
					conjunction();
					State = 63;
					clause(2);
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONJUNCTIONS() { return GetToken(RAQLParser.CONJUNCTIONS, 0); }
		public ConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConjunctionContext conjunction() {
		ConjunctionContext _localctx = new ConjunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_conjunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(CONJUNCTIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bool_array_operationContext bool_array_operation() {
			return GetRuleContext<Bool_array_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_array_operationContext number_array_operation() {
			return GetRuleContext<Number_array_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_array_operationContext string_array_operation() {
			return GetRuleContext<String_array_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_operationContext bool_operation() {
			return GetRuleContext<Bool_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_operationContext number_operation() {
			return GetRuleContext<Number_operationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_operationContext string_operation() {
			return GetRuleContext<String_operationContext>(0);
		}
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 6, RULE_operation);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				bool_array_operation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				number_array_operation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				string_array_operation();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				bool_operation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76;
				number_operation();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 77;
				string_operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_array_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_operatorContext array_operator() {
			return GetRuleContext<Array_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_arrayContext string_array() {
			return GetRuleContext<String_arrayContext>(0);
		}
		public String_array_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_array_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_array_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_array_operationContext string_array_operation() {
		String_array_operationContext _localctx = new String_array_operationContext(Context, State);
		EnterRule(_localctx, 8, RULE_string_array_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			field();
			State = 81;
			array_operator();
			State = 82;
			string_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_array_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_operatorContext array_operator() {
			return GetRuleContext<Array_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_arrayContext number_array() {
			return GetRuleContext<Number_arrayContext>(0);
		}
		public Number_array_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_array_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_array_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_array_operationContext number_array_operation() {
		Number_array_operationContext _localctx = new Number_array_operationContext(Context, State);
		EnterRule(_localctx, 10, RULE_number_array_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			field();
			State = 85;
			array_operator();
			State = 86;
			number_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_array_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_operatorContext array_operator() {
			return GetRuleContext<Array_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_arrayContext bool_array() {
			return GetRuleContext<Bool_arrayContext>(0);
		}
		public Bool_array_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_array_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_array_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_array_operationContext bool_array_operation() {
		Bool_array_operationContext _localctx = new Bool_array_operationContext(Context, State);
		EnterRule(_localctx, 12, RULE_bool_array_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			field();
			State = 89;
			array_operator();
			State = 90;
			bool_array();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(RAQLParser.IN, 0); }
		public Array_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_operatorContext array_operator() {
		Array_operatorContext _localctx = new Array_operatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_array_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public String_operatorContext string_operator() {
			return GetRuleContext<String_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullstringContext nullstring() {
			return GetRuleContext<NullstringContext>(0);
		}
		public String_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_operationContext string_operation() {
		String_operationContext _localctx = new String_operationContext(Context, State);
		EnterRule(_localctx, 16, RULE_string_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			field();
			State = 95;
			string_operator();
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 96;
				@string();
				}
				break;
			case NULL:
				{
				State = 97;
				nullstring();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_OPERATOR() { return GetToken(RAQLParser.BASE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_OPERATOR() { return GetToken(RAQLParser.STRING_OPERATOR, 0); }
		public String_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_operatorContext string_operator() {
		String_operatorContext _localctx = new String_operatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_string_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_OPERATOR || _la==STRING_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_operatorContext number_operator() {
			return GetRuleContext<Number_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Number_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_operationContext number_operation() {
		Number_operationContext _localctx = new Number_operationContext(Context, State);
		EnterRule(_localctx, 20, RULE_number_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			field();
			State = 103;
			number_operator();
			State = 104;
			number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_OPERATOR() { return GetToken(RAQLParser.BASE_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_OPERATOR() { return GetToken(RAQLParser.NUMBER_OPERATOR, 0); }
		public Number_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_operatorContext number_operator() {
		Number_operatorContext _localctx = new Number_operatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_number_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE_OPERATOR || _la==NUMBER_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_operationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bool_operatorContext bool_operator() {
			return GetRuleContext<Bool_operatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public Bool_operationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_operationContext bool_operation() {
		Bool_operationContext _localctx = new Bool_operationContext(Context, State);
		EnterRule(_localctx, 24, RULE_bool_operation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			field();
			State = 109;
			bool_operator();
			State = 110;
			@bool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_OPERATOR() { return GetToken(RAQLParser.BASE_OPERATOR, 0); }
		public Bool_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_operatorContext bool_operator() {
		Bool_operatorContext _localctx = new Bool_operatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_bool_operator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(BASE_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WORD() { return GetTokens(RAQLParser.WORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORD(int i) {
			return GetToken(RAQLParser.WORD, i);
		}
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 28, RULE_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WORD) {
				{
				{
				State = 114;
				Match(WORD);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullstringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(RAQLParser.NULL, 0); }
		public NullstringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullstring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullstring(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullstringContext nullstring() {
		NullstringContext _localctx = new NullstringContext(Context, State);
		EnterRule(_localctx, 30, RULE_nullstring);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RAQLParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public String_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_arrayContext string_array() {
		String_arrayContext _localctx = new String_arrayContext(Context, State);
		EnterRule(_localctx, 34, RULE_string_array);
		int _la;
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(T__3);
				State = 125;
				@string();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 126;
					Match(T__4);
					State = 127;
					@string();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				Match(T__3);
				State = 136;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RAQLParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 36, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public Number_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_arrayContext number_array() {
		Number_arrayContext _localctx = new Number_arrayContext(Context, State);
		EnterRule(_localctx, 38, RULE_number_array);
		int _la;
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				Match(T__3);
				State = 142;
				number();
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 143;
					Match(T__4);
					State = 144;
					number();
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 150;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				Match(T__3);
				State = 153;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(RAQLParser.BOOLEAN, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 40, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_arrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext[] @bool() {
			return GetRuleContexts<BoolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolContext @bool(int i) {
			return GetRuleContext<BoolContext>(i);
		}
		public Bool_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRAQLVisitor<TResult> typedVisitor = visitor as IRAQLVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_arrayContext bool_array() {
		Bool_arrayContext _localctx = new Bool_arrayContext(Context, State);
		EnterRule(_localctx, 42, RULE_bool_array);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158;
				Match(T__3);
				State = 159;
				@bool();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__4) {
					{
					{
					State = 160;
					Match(T__4);
					State = 161;
					@bool();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 167;
				Match(T__5);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				Match(T__3);
				State = 170;
				Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return clause_sempred((ClauseContext)_localctx, predIndex);
		}
		return true;
	}
	private bool clause_sempred(ClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', '\xB0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', ':', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'>', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x44', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'G', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'Q', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x65', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\a', '\x10', 'v', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', 'y', '\v', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x83', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\x86', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x8C', '\n', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\x94', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\x97', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x9D', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\xA5', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xA8', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xAE', '\n', '\x17', '\x3', '\x17', '\x2', '\x3', '\x4', '\x18', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '\x2', 
		'\x4', '\x3', '\x2', '\n', '\v', '\x4', '\x2', '\n', '\n', '\f', '\f', 
		'\x2', '\xAA', '\x2', '.', '\x3', '\x2', '\x2', '\x2', '\x4', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 'P', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'R', '\x3', '\x2', '\x2', '\x2', '\f', 
		'V', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '^', '\x3', '\x2', '\x2', '\x2', '\x12', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x66', '\x3', '\x2', '\x2', '\x2', '\x16', 'h', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 'l', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'n', '\x3', '\x2', '\x2', '\x2', '\x1C', 'r', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', 'w', '\x3', '\x2', '\x2', '\x2', ' ', 'z', '\x3', '\x2', '\x2', 
		'\x2', '\"', '|', '\x3', '\x2', '\x2', '\x2', '$', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x8D', '\x3', '\x2', '\x2', '\x2', '(', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '*', '\x9E', '\x3', '\x2', '\x2', '\x2', ',', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\x4', '\x3', '\x2', '/', 
		'\x30', '\a', '\x2', '\x2', '\x3', '\x30', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x31', '\x32', '\b', '\x3', '\x1', '\x2', '\x32', '>', '\x5', 
		'\b', '\x5', '\x2', '\x33', '\x35', '\a', '\x3', '\x2', '\x2', '\x34', 
		'\x36', '\a', '\x4', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x39', '\x5', '\x4', '\x3', '\x2', '\x38', 
		':', '\a', '\x4', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '\x5', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', 
		'\x2', '=', '\x31', '\x3', '\x2', '\x2', '\x2', '=', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x45', '\x3', '\x2', '\x2', '\x2', '?', '@', '\f', 
		'\x3', '\x2', '\x2', '@', '\x41', '\x5', '\x6', '\x4', '\x2', '\x41', 
		'\x42', '\x5', '\x4', '\x3', '\x4', '\x42', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '\r', '\x2', 
		'\x2', 'I', '\a', '\x3', '\x2', '\x2', '\x2', 'J', 'Q', '\x5', '\xE', 
		'\b', '\x2', 'K', 'Q', '\x5', '\f', '\a', '\x2', 'L', 'Q', '\x5', '\n', 
		'\x6', '\x2', 'M', 'Q', '\x5', '\x1A', '\xE', '\x2', 'N', 'Q', '\x5', 
		'\x16', '\f', '\x2', 'O', 'Q', '\x5', '\x12', '\n', '\x2', 'P', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'K', '\x3', '\x2', '\x2', '\x2', 'P', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\x1E', '\x10', '\x2', 'S', 
		'T', '\x5', '\x10', '\t', '\x2', 'T', 'U', '\x5', '$', '\x13', '\x2', 
		'U', '\v', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', '\x1E', '\x10', 
		'\x2', 'W', 'X', '\x5', '\x10', '\t', '\x2', 'X', 'Y', '\x5', '(', '\x15', 
		'\x2', 'Y', '\r', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x5', '\x1E', 
		'\x10', '\x2', '[', '\\', '\x5', '\x10', '\t', '\x2', '\\', ']', '\x5', 
		',', '\x17', '\x2', ']', '\xF', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\a', '\t', '\x2', '\x2', '_', '\x11', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x5', '\x1E', '\x10', '\x2', '\x61', '\x64', '\x5', '\x14', '\v', 
		'\x2', '\x62', '\x65', '\x5', '\"', '\x12', '\x2', '\x63', '\x65', '\x5', 
		' ', '\x11', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\t', '\x2', '\x2', '\x2', 'g', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x5', '\x1E', '\x10', '\x2', 'i', 'j', '\x5', 
		'\x18', '\r', '\x2', 'j', 'k', '\x5', '&', '\x14', '\x2', 'k', '\x17', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\t', '\x3', '\x2', '\x2', 'm', 
		'\x19', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x1E', '\x10', '\x2', 
		'o', 'p', '\x5', '\x1C', '\xF', '\x2', 'p', 'q', '\x5', '*', '\x16', '\x2', 
		'q', '\x1B', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\n', '\x2', 
		'\x2', 's', '\x1D', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\a', '\xF', 
		'\x2', '\x2', 'u', 't', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x1F', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', 
		'\x2', '\x2', '\x2', 'z', '{', '\a', '\x12', '\x2', '\x2', '{', '!', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\a', '\x10', '\x2', '\x2', '}', '#', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\a', '\x6', '\x2', '\x2', '\x7F', '\x84', 
		'\x5', '\"', '\x12', '\x2', '\x80', '\x81', '\a', '\a', '\x2', '\x2', 
		'\x81', '\x83', '\x5', '\"', '\x12', '\x2', '\x82', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\a', '\b', '\x2', '\x2', '\x88', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\x6', '\x2', '\x2', 
		'\x8A', '\x8C', '\a', '\b', '\x2', '\x2', '\x8B', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\xE', '\x2', '\x2', '\x8E', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x6', '\x2', 
		'\x2', '\x90', '\x95', '\x5', '&', '\x14', '\x2', '\x91', '\x92', '\a', 
		'\a', '\x2', '\x2', '\x92', '\x94', '\x5', '&', '\x14', '\x2', '\x93', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\b', '\x2', 
		'\x2', '\x99', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		'\x6', '\x2', '\x2', '\x9B', '\x9D', '\a', '\b', '\x2', '\x2', '\x9C', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', ')', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'\x11', '\x2', '\x2', '\x9F', '+', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\a', '\x6', '\x2', '\x2', '\xA1', '\xA6', '\x5', '*', '\x16', 
		'\x2', '\xA2', '\xA3', '\a', '\a', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		'*', '\x16', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\b', '\x2', '\x2', '\xAA', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\a', '\x6', '\x2', '\x2', '\xAC', '\xAE', '\a', 
		'\b', '\x2', '\x2', '\xAD', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAE', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x35', '\x39', '=', '\x45', 'P', '\x64', 'w', '\x84', '\x8B', 
		'\x95', '\x9C', '\xA6', '\xAD',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
